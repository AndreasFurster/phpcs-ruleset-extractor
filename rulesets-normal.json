[{"key":"Generic.Arrays.DisallowLongArraySyntax","title":"Short Array Syntax","standard":"Short array syntax must be used to define arrays.","code_comparison":[{"code":[{"content":"\n        \n$arr = <em>[</em>\n    'foo' => 'bar',\n<em>]</em>;\n        \n        ","title":["Valid: Short form of array."]},{"content":"\n        \n$arr = <em>array(</em>\n    'foo' => 'bar',\n<em>)</em>;\n        \n        ","title":["Invalid: Long form of array."]}]}]},{"key":"Generic.Arrays.DisallowShortArraySyntax","title":"Long Array Syntax","standard":"Long array syntax must be used to define arrays.","code_comparison":[{"code":[{"content":"\n        \n$arr = <em>array(</em>\n    'foo' => 'bar',\n<em>)</em>;\n        \n        ","title":["Valid: Long form of array."]},{"content":"\n        \n$arr = <em>[</em>\n    'foo' => 'bar',\n<em>]</em>;\n        \n        ","title":["Invalid: Short form of array."]}]}]},{"key":"Generic.Classes.DuplicateClassName","title":"Duplicate Class Names","standard":"Class and Interface names should be unique in a project.  They should never be duplicated.","code_comparison":[{"code":[{"content":"\n        \nclass <em>Foo</em>\n{\n}\n        \n        ","title":["Valid: A unique class name."]},{"content":"\n        \nclass <em>Foo</em>\n{\n}\n\nclass <em>Foo</em>\n{\n}\n        \n        ","title":["Invalid: A class duplicated (including across multiple files)."]}]}]},{"key":"Generic.Classes.OpeningBraceSameLine","title":"Opening Brace on Same Line","standard":"The opening brace of a class must be on the same line after the definition and must be the last thing on that line.","code_comparison":[{"code":[{"content":"\n        \nclass Foo <em>{</em>\n}\n        \n        ","title":["Valid: Opening brace on the same line."]},{"content":"\n        \nclass Foo\n<em>{</em>\n}\n        \n        ","title":["Invalid: Opening brace on the next line."]},{"content":"\n        \nclass Foo {<em> // Start of class.</em>\n}\n        \n        ","title":["Invalid: Opening brace not last thing on the line."]}]}]},{"key":"Generic.CodeAnalysis.AssignmentInCondition","title":"Assignment In Condition","standard":"Variable assignments should not be made within conditions.","code_comparison":[{"code":[{"content":"\n        \nif (<em>$test === 'abc'</em>) {\n    // Code.\n}\n        \n        ","title":["Valid: A variable comparison being executed within a condition."]},{"content":"\n        \nif (<em>$test = 'abc'</em>) {\n    // Code.\n}\n        \n        ","title":["Invalid: A variable assignment being made within a condition."]}]}]},{"key":"Generic.CodeAnalysis.EmptyStatement","title":"Empty Statements","standard":"Control Structures must have at least one statement inside of the body.","code_comparison":[{"code":[{"content":"\n        \nif ($test) {\n    $var = 1;\n}\n        \n        ","title":["Valid: There is a statement inside the control structure."]},{"content":"\n        \nif ($test) {\n    <em>// do nothing</em>\n}\n        \n        ","title":["Invalid: The control structure has no statements."]}]}]},{"key":"Generic.CodeAnalysis.ForLoopShouldBeWhileLoop","title":"Condition-Only For Loops","standard":"For loops that have only a second expression (the condition) should be converted to while loops.","code_comparison":[{"code":[{"content":"\n        \nfor (<em>$i = 0</em>; $i < 10; <em>$i++</em>) {\n    echo \"{$i}\\n\";\n}\n        \n        ","title":["Valid: A for loop is used with all three expressions."]},{"content":"\n        \nfor (<em></em>;$test;<em></em>) {\n    $test = doSomething();\n}\n        \n        ","title":["Invalid: A for loop is used without a first or third expression."]}]}]},{"key":"Generic.CodeAnalysis.ForLoopWithTestFunctionCall","title":"For Loops With Function Calls in the Test","standard":"For loops should not call functions inside the test for the loop when they can be computed beforehand.","code_comparison":[{"code":[{"content":"\n        \n<em>$end = count($foo);</em>\nfor ($i = 0; $i < $end; $i++) {\n    echo $foo[$i].\"\\n\";\n}\n        \n        ","title":["Valid: A for loop that determines its end condition before the loop starts."]},{"content":"\n        \nfor ($i = 0; $i < <em>count($foo)</em>; $i++) {\n    echo $foo[$i].\"\\n\";\n}\n        \n        ","title":["Invalid: A for loop that unnecessarily computes the same value on every iteration."]}]}]},{"key":"Generic.CodeAnalysis.JumbledIncrementer","title":"Jumbled Incrementers","standard":"Incrementers in nested loops should use different variable names.","code_comparison":[{"code":[{"content":"\n        \nfor ($i = 0; $i < 10; <em>$i++</em>) {\n    for ($j = 0; $j < 10; <em>$j++</em>) {\n    }\n}\n        \n        ","title":["Valid: Two different variables being used to increment."]},{"content":"\n        \nfor ($i = 0; $i < 10; <em>$i++</em>) {\n    for ($j = 0; $j < 10; <em>$i++</em>) {\n    }\n}\n        \n        ","title":["Invalid: Inner incrementer is the same variable name as the outer one."]}]}]},{"key":"Generic.CodeAnalysis.UnconditionalIfStatement","title":"Unconditional If Statements","standard":"If statements that are always evaluated should not be used.","code_comparison":[{"code":[{"content":"\n        \nif (<em>$test</em>) {\n    $var = 1;\n}\n        \n        ","title":["Valid: An if statement that only executes conditionally."]},{"content":"\n        \nif (<em>true</em>) {\n    $var = 1;\n}\n        \n        ","title":["Invalid: An if statement that is always performed."]}]},{"code":[{"content":"\n        \nif (<em>$test</em>) {\n    $var = 1;\n}\n        \n        ","title":["Valid: An if statement that only executes conditionally."]},{"content":"\n        \nif (<em>false</em>) {\n    $var = 1;\n}\n        \n        ","title":["Invalid: An if statement that is never performed."]}]}]},{"key":"Generic.CodeAnalysis.UnnecessaryFinalModifier","title":"Unnecessary Final Modifiers","standard":"Methods should not be declared final inside of classes that are declared final.","code_comparison":[{"code":[{"content":"\n        \nfinal class Foo\n{\n    public function bar()\n    {\n    }\n}\n        \n        ","title":["Valid: A method in a final class is not marked final."]},{"content":"\n        \nfinal class Foo\n{\n    public <em>final</em> function bar()\n    {\n    }\n}\n        \n        ","title":["Invalid: A method in a final class is also marked final."]}]}]},{"key":"Generic.CodeAnalysis.UnusedFunctionParameter","title":"Unused function parameters","standard":"All parameters in a functions signature should be used within the function.","code_comparison":[{"code":[{"content":"\n        \nfunction addThree($a, $b, $c)\n{\n    return <em>$a + $b + $c</em>;\n}\n        \n        ","title":["Valid: All the parameters are used."]},{"content":"\n        \nfunction addThree($a, $b, $c)\n{\n    return <em>$a + $b</em>;\n}\n        \n        ","title":["Invalid: One of the parameters is not being used."]}]}]},{"key":"Generic.CodeAnalysis.UselessOverridingMethod","title":"Useless Overriding Methods","standard":"Methods should not be defined that only call the parent method.","code_comparison":[{"code":[{"content":"\n        \nfinal class Foo\n{\n    public function bar()\n    {\n        parent::bar();\n        <em>$this->doSomethingElse();</em>\n    }\n}\n        \n        ","title":["Valid: A method that extends functionality on a parent method."]},{"content":"\n        \nfinal class Foo\n{\n    public function bar()\n    {\n        <em>parent::bar();</em>\n    }\n}\n        \n        ","title":["Invalid: An overriding method that only calls the parent."]}]}]},{"key":"Generic.Commenting.Fixme","title":"Fixme Comments","standard":"FIXME Statements should be taken care of.","code_comparison":[{"code":[{"content":"\n        \n// <em>Handle strange case</em>\nif ($test) {\n    $var = 1;\n}\n        \n        ","title":["Valid: A comment without a fixme."]},{"content":"\n        \n// <em>FIXME</em>: This needs to be fixed!\nif ($test) {\n    $var = 1;\n}\n        \n        ","title":["Invalid: A fixme comment."]}]}]},{"key":"Generic.Commenting.Todo","title":"Todo Comments","standard":"TODO Statements should be taken care of.","code_comparison":[{"code":[{"content":"\n        \n// <em>Handle strange case</em>\nif ($test) {\n    $var = 1;\n}\n        \n        ","title":["Valid: A comment without a todo."]},{"content":"\n        \n// <em>TODO</em>: This needs to be fixed!\nif ($test) {\n    $var = 1;\n}\n        \n        ","title":["Invalid: A todo comment."]}]}]},{"key":"Generic.ControlStructures.InlineControlStructure","title":"Inline Control Structures","standard":"Control Structures should use braces.","code_comparison":[{"code":[{"content":"\n        \nif ($test) <em>{</em>\n    $var = 1;\n<em>}</em>\n        \n        ","title":["Valid: Braces are used around the control structure."]},{"content":"\n        \nif ($test)\n    $var = 1;\n        \n        ","title":["Invalid: No braces are used for the control structure.."]}]}]},{"key":"Generic.Debug.ClosureLinter","title":"Closure Linter","standard":"All javascript files should pass basic Closure Linter tests.","code_comparison":[{"code":[{"content":"\n        \nvar foo = [1, 2<em></em>];\n        \n        ","title":["Valid: Valid JS Syntax is used."]},{"content":"\n        \nvar foo = [1, 2<em>,</em>];\n        \n        ","title":["Invalid: Trailing comma in a javascript array."]}]}]},{"key":"Generic.Debug.CSSLint","title":"CSSLint","standard":"All css files should pass the basic csslint tests.","code_comparison":[{"code":[{"content":"\n        \n.foo: { width: 100<em></em>%; }\n        \n        ","title":["Valid: Valid CSS Syntax is used."]},{"content":"\n        \n.foo: { width: 100<em> </em>%; }\n        \n        ","title":["Invalid: The CSS has a typo in it."]}]}]},{"key":"Generic.Debug.JSHint","title":"JSHint","standard":"All javascript files should pass basic JSHint tests.","code_comparison":[{"code":[{"content":"\n        \n<em>var</em> foo = 5;\n        \n        ","title":["Valid: Valid JS Syntax is used."]},{"content":"\n        \n<em></em>foo = 5;\n        \n        ","title":["Invalid: The Javascript is using an undefined variable."]}]}]},{"key":"Generic.Files.ByteOrderMark","title":"Byte Order Marks","standard":"Byte Order Marks that may corrupt your application should not be used.  These include 0xefbbbf (UTF-8), 0xfeff (UTF-16 BE) and 0xfffe (UTF-16 LE)."},{"key":"Generic.Files.EndFileNewline","title":"End of File Newline","standard":"Files should end with a newline character."},{"key":"Generic.Files.EndFileNoNewline","title":"No End of File Newline","standard":"Files should not end with a newline character."},{"key":"Generic.Files.InlineHTML","title":"Inline HTML","standard":"Files that contain php code should only have php code and should not have any \"inline html\".","code_comparison":[{"code":[{"content":"\n        \n<?php\n$foo = 'bar';\necho $foo . 'baz';\n        \n        ","title":["Valid: A php file with only php code in it."]},{"content":"\n        \n<em>some string here</em>\n<?php\n$foo = 'bar';\necho $foo . 'baz';\n        \n        ","title":["Invalid: A php file with html in it outside of the php tags."]}]}]},{"key":"Generic.Files.LineEndings","title":"Line Endings","standard":"Unix-style line endings are preferred (\"\\n\" instead of \"\\r\\n\")."},{"key":"Generic.Files.LineLength","title":"Line Length","standard":"It is recommended to keep lines at approximately 80 characters long for better code readability."},{"key":"Generic.Files.LowercasedFilename","title":"Lowercased Filenames","standard":"Lowercase filenames are required."},{"key":"Generic.Files.OneClassPerFile","title":"One Class Per File","standard":"There should only be one class defined in a file.","code_comparison":[{"code":[{"content":"\n        \n<?php\n<em>class Foo</em>\n{\n}\n        \n        ","title":["Valid: Only one class in the file."]},{"content":"\n        \n<?php\n<em>class Foo</em>\n{\n}\n\n<em>class Bar</em>\n{\n}\n        \n        ","title":["Invalid: Multiple classes defined in one file."]}]}]},{"key":"Generic.Files.OneInterfacePerFile","title":"One Interface Per File","standard":"There should only be one interface defined in a file.","code_comparison":[{"code":[{"content":"\n        \n<?php\n<em>interface Foo</em>\n{\n}\n        \n        ","title":["Valid: Only one interface in the file."]},{"content":"\n        \n<?php\n<em>interface Foo</em>\n{\n}\n\n<em>interface Bar</em>\n{\n}\n        \n        ","title":["Invalid: Multiple interfaces defined in one file."]}]}]},{"key":"Generic.Files.OneObjectStructurePerFile","title":"One Object Structure Per File","standard":"There should only be one class or interface or trait defined in a file.","code_comparison":[{"code":[{"content":"\n        \n<?php\n<em>trait Foo</em>\n{\n}\n        \n        ","title":["Valid: Only one object structure in the file."]},{"content":"\n        \n<?php\n<em>trait Foo</em>\n{\n}\n\n<em>class Bar</em>\n{\n}\n        \n        ","title":["Invalid: Multiple object structures defined in one file."]}]}]},{"key":"Generic.Files.OneTraitPerFile","title":"One Trait Per File","standard":"There should only be one trait defined in a file.","code_comparison":[{"code":[{"content":"\n        \n<?php\n<em>trait Foo</em>\n{\n}\n        \n        ","title":["Valid: Only one trait in the file."]},{"content":"\n        \n<?php\n<em>trait Foo</em>\n{\n}\n\n<em>trait Bar</em>\n{\n}\n        \n        ","title":["Invalid: Multiple traits defined in one file."]}]}]},{"key":"Generic.Formatting.DisallowMultipleStatements","title":"Multiple Statements On a Single Line","standard":"Multiple statements are not allowed on a single line.","code_comparison":[{"code":[{"content":"\n        \n$foo = 1;\n$bar = 2;\n        \n        ","title":["Valid: Two statements are spread out on two separate lines."]},{"content":"\n        \n$foo = 1; $bar = 2;\n        \n        ","title":["Invalid: Two statements are combined onto one line."]}]}]},{"key":"Generic.Formatting.MultipleStatementAlignment","title":"Aligning Blocks of Assignments","standard":"  There should be one space on either side of an equals sign used to assign a value to a variable. In the case of a block of related assignments, more space may be inserted to promote readability.","code_comparison":[{"code":[{"content":"\n        \n$shortVar        <em>=</em> (1 + 2);\n$veryLongVarName <em>=</em> 'string';\n$var             <em>=</em> foo($bar, $baz, $quux);\n        \n        ","title":["Equals signs aligned"]},{"content":"\n        \n$shortVar <em>=</em> (1 + 2);\n$veryLongVarName <em>=</em> 'string';\n$var <em>=</em> foo($bar, $baz, $quux);\n        \n        ","title":["Not aligned; harder to read"]}]},{"code":[{"content":"\n        \n$shortVar       <em>+= </em>1;\n$veryLongVarName<em> = </em>1;\n        \n        ","title":["Equals signs aligned; only one space after longest var name"]},{"content":"\n        \n$shortVar       <em> += </em>1;\n$veryLongVarName<em>  = </em>1;\n        \n        ","title":["Two spaces after longest var name"]}]},{"code":[{"content":"\n        \n$shortVar       <em>  = </em>1;\n$veryLongVarName<em> -= </em>1;\n        \n        ","title":["Equals signs aligned"]},{"content":"\n        \n$shortVar       <em> = </em>1;\n$veryLongVarName<em> -= </em>1;\n        \n        ","title":["Equals signs not aligned"]}]}]},{"key":"Generic.Formatting.NoSpaceAfterCast","title":"Space After Casts","standard":"Spaces are not allowed after casting operators.","code_comparison":[{"code":[{"content":"\n        \n$foo = (string)1;\n        \n        ","title":["Valid: A cast operator is immediately before its value."]},{"content":"\n        \n$foo = (string)<em> </em>1;\n        \n        ","title":["Invalid: A cast operator is followed by whitespace."]}]}]},{"key":"Generic.Formatting.SpaceAfterCast","title":"Space After Casts","standard":"Exactly one space is allowed after a cast.","code_comparison":[{"code":[{"content":"\n        \n$foo = (string)<em> </em>1;\n        \n        ","title":["Valid: A cast operator is followed by one space."]},{"content":"\n        \n$foo = (string)<em></em>1;\n        \n        ","title":["Invalid: A cast operator is not followed by whitespace."]}]}]},{"key":"Generic.Formatting.SpaceAfterNot","title":"Space After NOT operator","standard":"Exactly one space is allowed after the NOT operator.","code_comparison":[{"code":[{"content":"\n        \nif (!<em> </em>$someVar || !<em> </em>$x instanceOf stdClass) {};\n        \n        ","title":["Valid: A NOT operator followed by one space."]},{"content":"\n        \nif (!<em></em>$someVar || !<em></em>$x instanceOf stdClass) {};\n        \n        ","title":["Invalid: A NOT operator not followed by whitespace."]},{"content":"\n        \nif (!<em>     </em>$someVar || !<em>\n    </em>$x instanceOf stdClass) {};\n        \n        ","title":["Invalid: A NOT operator followed by a new line or more than one space."]}]}]},{"key":"Generic.Functions.CallTimePassByReference","title":"Call-Time Pass-By-Reference","standard":"Call-time pass-by-reference is not allowed. It should be declared in the function definition.","code_comparison":[{"code":[{"content":"\n        \nfunction foo(<em>&</em>$bar)\n{\n    $bar++;\n}\n\n$baz = 1;\nfoo($baz);\n        \n        ","title":["Valid: Pass-by-reference is specified in the function definition."]},{"content":"\n        \nfunction foo($bar)\n{\n    $bar++;\n}\n\n$baz = 1;\nfoo(<em>&</em>$baz);\n        \n        ","title":["Invalid: Pass-by-reference is done in the call to a function."]}]}]},{"key":"Generic.Functions.FunctionCallArgumentSpacing","title":"Function Argument Spacing","standard":"Function arguments should have one space after a comma, and single spaces surrounding the equals sign for default values.","code_comparison":[{"code":[{"content":"\n        \nfunction foo($bar,<em> </em>$baz)\n{\n}\n        \n        ","title":["Valid: Single spaces after a comma."]},{"content":"\n        \nfunction foo($bar,<em></em>$baz)\n{\n}\n        \n        ","title":["Invalid: No spaces after a comma."]}]},{"code":[{"content":"\n        \nfunction foo($bar, $baz<em> </em>=<em> </em>true)\n{\n}\n        \n        ","title":["Valid: Single spaces around an equals sign in function declaration."]},{"content":"\n        \nfunction foo($bar, $baz<em></em>=<em></em>true)\n{\n}\n        \n        ","title":["Invalid: No spaces around an equals sign in function declaration."]}]}]},{"key":"Generic.Functions.OpeningFunctionBraceBsdAllman","title":"Opening Brace in Function Declarations","standard":"Function declarations follow the \"BSD/Allman style\". The function brace is on the line following the function declaration and is indented to the same column as the start of the function declaration.","code_comparison":[{"code":[{"content":"\n        \nfunction fooFunction($arg1, $arg2 = '')\n<em>{</em>\n    ...\n}\n        \n        ","title":["Valid: brace on next line"]},{"content":"\n        \nfunction fooFunction($arg1, $arg2 = '') <em>{</em>\n    ...\n}\n        \n        ","title":["Invalid: brace on same line"]}]}]},{"key":"Generic.Functions.OpeningFunctionBraceKernighanRitchie","title":"Opening Brace in Function Declarations","standard":"Function declarations follow the \"Kernighan/Ritchie style\". The function brace is on the same line as the function declaration. One space is required between the closing parenthesis and the brace.","code_comparison":[{"code":[{"content":"\n        \nfunction fooFunction($arg1, $arg2 = '')<em> {</em>\n    ...\n}\n        \n        ","title":["Valid: brace on same line"]},{"content":"\n        \nfunction fooFunction($arg1, $arg2 = '')\n<em>{</em>\n    ...\n}\n        \n        ","title":["Invalid: brace on next line"]}]}]},{"key":"Generic.Metrics.CyclomaticComplexity","title":"Cyclomatic Complexity","standard":"Functions should not have a cyclomatic complexity greater than 20, and should try to stay below a complexity of 10."},{"key":"Generic.Metrics.NestingLevel","title":"Nesting Level","standard":"Functions should not have a nesting level greater than 10, and should try to stay below 5."},{"key":"Generic.NamingConventions.CamelCapsFunctionName","title":"camelCaps Function Names","standard":"Functions should use camelCaps format for their names. Only PHP's magic methods should use a double underscore prefix.","code_comparison":[{"code":[{"content":"\n        \nfunction <em>doSomething</em>()\n{\n}\n        \n        ","title":["Valid: A function in camelCaps format."]},{"content":"\n        \nfunction <em>do_something</em>()\n{\n}\n        \n        ","title":["Invalid: A function in snake_case format."]}]}]},{"key":"Generic.NamingConventions.ConstructorName","title":"Constructor name","standard":"Constructors should be named __construct, not after the class.","code_comparison":[{"code":[{"content":"\n        \nclass Foo\n{\n    function <em>__construct</em>()\n    {\n    }\n}\n        \n        ","title":["Valid: The constructor is named __construct."]},{"content":"\n        \nclass Foo\n{\n    function <em>Foo</em>()\n    {\n    }\n}\n        \n        ","title":["Invalid: The old style class name constructor is used."]}]}]},{"key":"Generic.NamingConventions.UpperCaseConstantName","title":"Constant Names","standard":" Constants should always be all-uppercase, with underscores to separate words.","code_comparison":[{"code":[{"content":"\n        \ndefine('<em>FOO_CONSTANT</em>', 'foo');\n\nclass FooClass\n{\n    const <em>FOO_CONSTANT</em> = 'foo';\n}\n        \n        ","title":["Valid: all uppercase"]},{"content":"\n        \ndefine('<em>Foo_Constant</em>', 'foo');\n\nclass FooClass\n{\n    const <em>foo_constant</em> = 'foo';\n}\n        \n        ","title":["Invalid: mixed case"]}]}]},{"key":"Generic.PHP.BacktickOperator","title":"Backtick Operator","standard":"Disallow the use of the backtick operator for execution of shell commands."},{"key":"Generic.PHP.CharacterBeforePHPOpeningTag","title":"Opening Tag at Start of File","standard":"The opening php tag should be the first item in the file.","code_comparison":[{"code":[{"content":"\n        \n<em></em><?php\necho 'Foo';\n        \n        ","title":["Valid: A file starting with an opening php tag."]},{"content":"\n        \n<em>Beginning content</em>\n<?php\necho 'Foo';\n        \n        ","title":["Invalid: A file with content before the opening php tag."]}]}]},{"key":"Generic.PHP.ClosingPHPTag","title":"Closing PHP Tags","standard":"All opening php tags should have a corresponding closing tag.","code_comparison":[{"code":[{"content":"\n        \n<em><?php</em>\necho 'Foo';\n<em>?></em>\n        \n        ","title":["Valid: A closing tag paired with it's opening tag."]},{"content":"\n        \n<em><?php</em>\necho 'Foo';\n        \n        ","title":["Invalid: No closing tag paired with the opening tag."]}]}]},{"key":"Generic.PHP.DeprecatedFunctions","title":"Deprecated Functions","standard":"Deprecated functions should not be used.","code_comparison":[{"code":[{"content":"\n        \n$foo = <em>explode</em>('a', $bar);\n        \n        ","title":["Valid: A non-deprecated function is used."]},{"content":"\n        \n$foo = <em>split</em>('a', $bar);\n        \n        ","title":["Invalid: A deprecated function is used."]}]}]},{"key":"Generic.PHP.DisallowAlternativePHPTags","title":"Alternative PHP Code Tags","standard":"Always use <?php ?> to delimit PHP code, do not use the ASP <% %> style tags nor the <script language=\"php\"></script> tags. This is the most portable way to include PHP code on differing operating systems and setups."},{"key":"Generic.PHP.DisallowShortOpenTag","title":"PHP Code Tags","standard":"Always use <?php ?> to delimit PHP code, not the <? ?> shorthand. This is the most portable way to include PHP code on differing operating systems and setups."},{"key":"Generic.PHP.DiscourageGoto","title":"Goto","standard":"Discourage the use of the PHP `goto` language construct."},{"key":"Generic.PHP.ForbiddenFunctions","title":"Forbidden Functions","standard":"The forbidden functions sizeof() and delete() should not be used.","code_comparison":[{"code":[{"content":"\n        \n$foo = <em>count</em>($bar);\n        \n        ","title":["Valid: count() is used in place of sizeof()."]},{"content":"\n        \n$foo = <em>sizeof</em>($bar);\n        \n        ","title":["Invalid: sizeof() is used."]}]}]},{"key":"Generic.PHP.LowerCaseConstant","title":"Lowercase PHP Constants","standard":"The <em>true</em>, <em>false</em> and <em>null</em> constants must always be lowercase.","code_comparison":[{"code":[{"content":"\n        \nif ($var === <em>false</em> || $var === <em>null</em>) {\n    $var = <em>true</em>;\n}\n        \n        ","title":["Valid: lowercase constants"]},{"content":"\n        \nif ($var === <em>FALSE</em> || $var === <em>NULL</em>) {\n    $var = <em>TRUE</em>;\n}\n        \n        ","title":["Invalid: uppercase constants"]}]}]},{"key":"Generic.PHP.LowerCaseKeyword","title":"Lowercase Keywords","standard":"All PHP keywords should be lowercase.","code_comparison":[{"code":[{"content":"\n        \n$foo = <em>array</em>();\n        \n        ","title":["Valid: Lowercase array keyword used."]},{"content":"\n        \n$foo = <em>Array</em>();\n        \n        ","title":["Invalid: Non-lowercase array keyword used."]}]}]},{"key":"Generic.PHP.LowerCaseType","title":"Lowercase PHP Types","standard":"All PHP types used for parameter type and return type declarations should be lowercase.","code_comparison":[{"code":[{"content":"\n        \nfunction myFunction(int $foo) : string {\n}\n        \n        ","title":["Valid: Lowercase type declarations used."]},{"content":"\n        \nfunction myFunction(<em>Int</em> $foo) : <em>STRING</em> {\n}\n        \n        ","title":["Invalid: Non-lowercase type declarations used."]}]},{"code":[{"content":"\n        \n$foo = (bool) $isValid;\n        \n        ","title":["Valid: Lowercase type used."]},{"content":"\n        \n$foo = <em>(BOOL)</em> $isValid;\n        \n        ","title":["Invalid: Non-lowercase type used."]}]}]},{"key":"Generic.PHP.NoSilencedErrors","title":"Silenced Errors","standard":"Suppressing Errors is not allowed.","code_comparison":[{"code":[{"content":"\n        \nif (<em>isset($foo)</em> && $foo) {\n    echo \"Hello\\n\";\n}\n        \n        ","title":["Valid: isset() is used to verify that a variable exists before trying to use it."]},{"content":"\n        \nif (<em>@</em>$foo) {\n    echo \"Hello\\n\";\n}\n        \n        ","title":["Invalid: Errors are suppressed."]}]}]},{"key":"Generic.PHP.SAPIUsage","title":"SAPI Usage","standard":"The PHP_SAPI constant should be used instead of php_sapi_name().","code_comparison":[{"code":[{"content":"\n        \nif (<em>PHP_SAPI</em> === 'cli') {\n    echo \"Hello, CLI user.\";\n}\n        \n        ","title":["Valid: PHP_SAPI is used."]},{"content":"\n        \nif (<em>php_sapi_name()</em> === 'cli') {\n    echo \"Hello, CLI user.\";\n}\n        \n        ","title":["Invalid: php_sapi_name() is used."]}]}]},{"key":"Generic.PHP.UpperCaseConstant","title":"Uppercase PHP Constants","standard":"The <em>true</em>, <em>false</em> and <em>null</em> constants must always be uppercase.","code_comparison":[{"code":[{"content":"\n        \nif ($var === <em>FALSE</em> || $var === <em>NULL</em>) {\n    $var = <em>TRUE</em>;\n}\n        \n        ","title":["Valid: uppercase constants"]},{"content":"\n        \nif ($var === <em>false</em> || $var === <em>null</em>) {\n    $var = <em>true</em>;\n}\n        \n        ","title":["Invalid: lowercase constants"]}]}]},{"key":"Generic.Strings.UnnecessaryStringConcat","title":"Unnecessary String Concatenation","standard":"Strings should not be concatenated together.","code_comparison":[{"code":[{"content":"\n        \necho '5 + 2 = ' . (5 + 2);\n        \n        ","title":["Valid: A string can be concatenated with an expression."]},{"content":"\n        \necho 'Hello' . ' ' . 'World';\n        \n        ","title":["Invalid: Strings should not be concatenated together."]}]}]},{"key":"Generic.VersionControl.SubversionProperties","title":"Subversion Properties","standard":"All php files in a subversion repository should have the svn:keywords property set to 'Author Id Revision' and the svn:eol-style property set to 'native'."},{"key":"Generic.WhiteSpace.ArbitraryParenthesesSpacing","title":"Arbitrary Parentheses Spacing","standard":"Arbitrary sets of parentheses should have no spaces inside.","code_comparison":[{"code":[{"content":"\n        \n$a = (null !== $extra);\n        \n        ","title":["Valid: no spaces on the inside of a set of arbitrary parentheses."]},{"content":"\n        \n$a = ( null !== $extra );\n        \n        ","title":["Invalid: spaces on the inside of a set of arbitrary parentheses."]},{"content":"\n        \n$a = (\n    null !== $extra\n);\n        \n        ","title":["Invalid: new lines on the inside of a set of arbitrary parentheses."]}]}]},{"key":"Generic.WhiteSpace.DisallowSpaceIndent","title":"No Space Indentation","standard":"Tabs should be used for indentation instead of spaces."},{"key":"Generic.WhiteSpace.DisallowTabIndent","title":"No Tab Indentation","standard":"Spaces should be used for indentation instead of tabs."},{"key":"Generic.WhiteSpace.ScopeIndent","title":"Scope Indentation","standard":"Indentation for control structures, classes, and functions should be 4 spaces per level.","code_comparison":[{"code":[{"content":"\n        \nif ($test) {\n<em>    </em>$var = 1;\n}\n        \n        ","title":["Valid: 4 spaces are used to indent a control structure."]},{"content":"\n        \nif ($test) {\n<em>        </em>$var = 1;\n}\n        \n        ","title":["Invalid: 8 spaces are used to indent a control structure."]}]}]},{"key":"PEAR.Classes.ClassDeclaration","title":"Class Declarations","standard":"The opening brace of a class must be on the line after the definition by itself.","code_comparison":[{"code":[{"content":"\n        \nclass Foo\n<em>{</em>\n}\n        \n        ","title":["Valid: Opening brace on the correct line."]},{"content":"\n        \nclass Foo <em>{</em>\n}\n        \n        ","title":["Invalid: Opening brace on same line as declaration."]}]}]},{"key":"PEAR.Commenting.ClassComment","title":"Class Comments","standard":"Classes and interfaces must have a non-empty doc comment.  The short description must be on the second line of the comment.  Each description must have one blank comment line before and after.  There must be one blank line before the tags in the comments.  A @version tag must be in Release: package_version format.","code_comparison":[{"code":[{"content":"\n        \n<em>/**\n * The Foo class.\n */</em>\nclass Foo\n{\n}\n        \n        ","title":["Valid: A doc comment for the class."]},{"content":"\n        \nclass Foo\n{\n}\n        \n        ","title":["Invalid: No doc comment for the class."]}]},{"code":[{"content":"\n        \n<em>/**\n * The Foo class.\n */</em>\nclass Foo\n{\n}\n        \n        ","title":["Valid: A doc comment for the class."]},{"content":"\n        \n// The Foo class.\nclass Foo\n{\n}\n        \n        ","title":["Invalid: Invalid comment type for the class."]}]},{"code":[{"content":"\n        \n<em>/**\n * The Foo class.\n */</em>\nclass Foo\n{\n}\n        \n        ","title":["Valid: A doc comment for the class."]},{"content":"\n        \n<em>/**\n * The Foo class.\n */</em>\n\nclass Foo\n{\n}\n        \n        ","title":["Invalid: The blank line after the comment makes it appear as a file comment, not a class comment."]}]},{"code":[{"content":"\n        \n/**\n * <em>The Foo class.</em>\n */\nclass Foo\n{\n}\n        \n        ","title":["Valid: Short description is the second line of the comment."]},{"content":"\n        \n/**\n *\n * <em>The Foo class.</em>\n */\nclass Foo\n{\n}\n        \n        ","title":["Invalid: An extra blank line before the short description."]}]},{"code":[{"content":"\n        \n/**\n * The Foo class.\n * <em></em>\n * A helper for the Bar class.\n * <em></em>\n * @see Bar\n */\nclass Foo\n{\n}\n        \n        ","title":["Valid: Exactly one blank line around descriptions."]},{"content":"\n        \n/**\n * The Foo class.\n * <em></em>\n * <em></em>\n * A helper for the Bar class.\n * <em></em>\n * <em></em>\n * @see Bar\n */\nclass Foo\n{\n}\n        \n        ","title":["Invalid: Extra blank lines around the descriptions."]}]},{"code":[{"content":"\n        \n/**\n * The Foo class.\n * <em></em>\n * @see Bar\n */\nclass Foo\n{\n}\n        \n        ","title":["Valid: Exactly one blank line before the tags."]},{"content":"\n        \n/**\n * The Foo class.\n * <em></em>\n * <em></em>\n * @see Bar\n */\nclass Foo\n{\n}\n        \n        ","title":["Invalid: Extra blank lines before the tags."]}]},{"code":[{"content":"\n        \n/**\n * The Foo class.\n *\n * @version <em>Release: 1.0</em>\n */\nclass Foo\n{\n}\n        \n        ","title":["Valid: Version tag is in the correct format."]},{"content":"\n        \n/**\n * The Foo class.\n *\n * @version <em>1.0</em>\n */\nclass Foo\n{\n}\n        \n        ","title":["Invalid: No Release: text."]}]}]},{"key":"PEAR.Commenting.FileComment","title":"File Comments","standard":"Files must have a non-empty doc comment.  The short description must be on the second line of the comment.  Each description must have one blank comment line before and after.  There must be one blank line before the tags in the comments.  There must be a category, package, author, license, and link tag.  There may only be one category, package, subpackage, license, version, since and deprecated tag.  The tags must be in the order category, package, subpackage, author, copyright, license, version, link, see, since, and deprecated.  The php version must be specified.","code_comparison":[{"code":[{"content":"\n        \n<?php\n<em>/**\n * Short description here.\n *\n * PHP version 5\n *\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */</em>\n        \n        ","title":["Valid: A file comment is used."]},{"content":"\n        \n<?php\n<em></em>\n        \n        ","title":["Invalid: No doc comment for the class."]}]},{"code":[{"content":"\n        \n<?php\n/**\n * <em>Short description here.</em>\n *\n * PHP version 5\n *\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Valid: Short description is the second line of the comment."]},{"content":"\n        \n<?php\n/**\n * <em></em>\n * <em>Short description here.</em>\n *\n * PHP version 5\n *\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Invalid: An extra blank line before the short description."]}]},{"code":[{"content":"\n        \n<?php\n/**\n * Short description here.\n * <em></em>\n * PHP version 5\n * <em></em>\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Valid: Exactly one blank line around descriptions."]},{"content":"\n        \n<?php\n/**\n * Short description here.\n * <em></em>\n * <em></em>\n * PHP version 5\n * <em></em>\n * <em></em>\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Invalid: Extra blank lines around the descriptions."]}]},{"code":[{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n * <em></em>\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Valid: Exactly one blank line before the tags."]},{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n * <em></em>\n * <em></em>\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Invalid: Extra blank lines before the tags."]}]},{"code":[{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n *\n * <em>@category</em> Foo\n * <em>@package</em> Foo_Helpers\n * <em>@author</em> Marty McFly <mmcfly@example.com>\n * <em>@copyright</em> 2013-2014 Foo Inc.\n * <em>@license</em> MIT License\n * <em>@link</em> http://example.com\n */\n        \n        ","title":["Valid: All required tags are used."]},{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n *\n * @category Foo\n * @package Foo_Helpers\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Invalid: Missing an author tag."]}]},{"code":[{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n *\n * <em>@category</em> Foo\n * <em>@package</em> Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * <em>@license</em> MIT License\n * @link http://example.com\n */\n        \n        ","title":["Valid: Tags that should only be used once are only used once."]},{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n *\n * <em>@category</em> Foo\n * <em>@category</em> Bar\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Invalid: Multiple category tags."]}]},{"code":[{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * <em>PHP version 5</em>\n *\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Valid: PHP version specified."]},{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n *\n * <em>@package</em> Foo_Helpers\n * <em>@category</em> Foo\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Invalid: Category and package tags are swapped in order."]}]},{"code":[{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * PHP version 5\n *\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Valid: Tags are in the correct order."]},{"content":"\n        \n<?php\n/**\n * Short description here.\n *\n * @category Foo\n * @package Foo_Helpers\n * @author Marty McFly <mmcfly@example.com>\n * @copyright 2013-2014 Foo Inc.\n * @license MIT License\n * @link http://example.com\n */\n        \n        ","title":["Invalid: No php version specified."]}]}]},{"key":"PEAR.Commenting.FunctionComment","title":"Function Comments","standard":"Functions must have a non-empty doc comment.  The short description must be on the second line of the comment.  Each description must have one blank comment line before and after.  There must be one blank line before the tags in the comments.  There must be a tag for each of the parameters in the right order with the right variable names with a comment.  There must be a return tag.  Any throw tag must have an exception class.","code_comparison":[{"code":[{"content":"\n        \n<em>/**\n * Short description here.\n *\n * @return void\n */</em>\n function foo()\n {\n }\n        \n        ","title":["Valid: A function doc comment is used."]},{"content":"\n        \n function foo()\n {\n }\n        \n        ","title":["Invalid: No doc comment for the function."]}]},{"code":[{"content":"\n        \n/**\n * <em>Short description here.</em>\n *\n * @return void\n */\n function foo()\n {\n }\n        \n        ","title":["Valid: Short description is the second line of the comment."]},{"content":"\n        \n/**\n * <em></em>\n * <em>Short description here.</em>\n *\n * @return void\n */\n function foo()\n {\n }\n        \n        ","title":["Invalid: An extra blank line before the short description."]}]},{"code":[{"content":"\n        \n/**\n * Short description here.\n * <em></em>\n * Long description here.\n * <em></em>\n * @return void\n */\n function foo()\n {\n }\n        \n        ","title":["Valid: Exactly one blank line around descriptions."]},{"content":"\n        \n/**\n * Short description here.\n * <em></em>\n * <em></em>\n * Long description here.\n * <em></em>\n * <em></em>\n * @return void\n */\n function foo()\n {\n }\n        \n        ","title":["Invalid: Extra blank lines around the descriptions."]}]},{"code":[{"content":"\n        \n/**\n * Short description here.\n *\n * Long description here.\n * <em></em>\n * @return void\n */\n function foo()\n {\n }\n        \n        ","title":["Valid: Exactly one blank line before the tags."]},{"content":"\n        \n/**\n * Short description here.\n *\n * Long description here.\n * <em></em>\n * <em></em>\n * @return void\n */\n function foo()\n {\n }\n        \n        ","title":["Invalid: Extra blank lines before the tags."]}]},{"code":[{"content":"\n        \n/**\n * Short description here.\n *\n * @return void\n * @throws <em>FooException</em>\n */\n function foo()\n {\n }\n        \n        ","title":["Valid: Throws tag has an exception class."]},{"content":"\n        \n/**\n * Short description here.\n *\n * @return void\n * <em>@throws</em>\n */\n function foo()\n {\n }\n        \n        ","title":["Invalid: No exception class given for throws tag."]}]},{"code":[{"content":"\n        \n/**\n * Short description here.\n *\n * <em>@return void</em>\n */\n function foo()\n {\n }\n        \n        ","title":["Valid: Return tag present."]},{"content":"\n        \n/**\n * Short description here.\n */\n function foo()\n {\n }\n        \n        ","title":["Invalid: No return tag."]}]},{"code":[{"content":"\n        \n/**\n * Short description here.\n *\n * @param string <em>$foo</em> Foo parameter\n * @param string <em>$bar</em> Bar parameter\n * @return void\n */\n function foo(<em>$foo</em>, <em>$bar</em>)\n {\n }\n        \n        ","title":["Valid: Param names are correct."]},{"content":"\n        \n/**\n * Short description here.\n *\n * @param string $foo Foo parameter\n * @param string <em>$qux</em> Bar parameter\n * @return void\n */\n function foo($foo, <em>$bar</em>)\n {\n }\n        \n        ","title":["Invalid: Wrong parameter name doesn't match function signature."]}]},{"code":[{"content":"\n        \n/**\n * Short description here.\n *\n * @param string <em>$foo</em> Foo parameter\n * @param string <em>$bar</em> Bar parameter\n * @return void\n */\n function foo(<em>$foo</em>, <em>$bar</em>)\n {\n }\n        \n        ","title":["Valid: Param names are ordered correctly."]},{"content":"\n        \n/**\n * Short description here.\n *\n * @param string <em>$bar</em> Bar parameter\n * @param string <em>$foo</em> Foo parameter\n * @return void\n */\n function foo(<em>$foo</em>, <em>$bar</em>)\n {\n }\n        \n        ","title":["Invalid: Wrong parameter order."]}]}]},{"key":"PEAR.Commenting.InlineComment","title":"Inline Comments","standard":"Perl-style # comments are not allowed.","code_comparison":[{"code":[{"content":"\n        \n<em>//</em> A comment.\n        \n        ","title":["Valid: A // style comment."]},{"content":"\n        \n<em>#</em> A comment.\n        \n        ","title":["Invalid: A # style comment."]}]}]},{"key":"PEAR.ControlStructures.ControlSignature","title":"Control Structure Signatures","standard":"Control structures should use one space around the parentheses in conditions.  The opening brace should be preceded by one space and should be at the end of the line.","code_comparison":[{"code":[{"content":"\n        \nif<em> </em>($foo)<em> </em>{\n}\n        \n        ","title":["Valid: Correct spacing around the condition."]},{"content":"\n        \nif<em></em>($foo)<em></em>{\n}\n        \n        ","title":["Invalid: Incorrect spacing around the condition."]}]},{"code":[{"content":"\n        \nif ($foo) <em>{</em>\n}\n        \n        ","title":["Valid: Correct placement of the opening brace."]},{"content":"\n        \nif ($foo)\n<em>{</em>\n}\n        \n        ","title":["Invalid: Incorrect placement of the opening brace on a new line."]}]}]},{"key":"PEAR.ControlStructures.MultiLineCondition","title":"Multi-line If Conditions","standard":"Multi-line if conditions should be indented one level and each line should begin with a boolean operator.  The end parenthesis should be on a new line.","code_comparison":[{"code":[{"content":"\n        \nif ($foo\n<em>    </em>&& $bar\n) {\n}\n        \n        ","title":["Valid: Correct indentation."]},{"content":"\n        \nif ($foo\n<em></em>&& $bar\n) {\n}\n        \n        ","title":["Invalid: No indentation used on the condition lines."]}]},{"code":[{"content":"\n        \nif ($foo\n    <em>&&</em> $bar\n) {\n}\n        \n        ","title":["Valid: Boolean operator at the start of the line."]},{"content":"\n        \nif ($foo <em>&&</em>\n    $bar\n) {\n}\n        \n        ","title":["Invalid: Boolean operator at the end of the line."]}]},{"code":[{"content":"\n        \nif ($foo\n    && $bar\n<em>)</em> {\n}\n        \n        ","title":["Valid: End parenthesis on a new line."]},{"content":"\n        \nif ($foo\n    && $bar<em>)</em> {\n}\n        \n        ","title":["Invalid: End parenthesis not moved to a new line."]}]}]},{"key":"PEAR.Files.IncludingFile","title":"Including Code","standard":"Anywhere you are unconditionally including a class file, use <em>require_once</em>. Anywhere you are conditionally including a class file (for example, factory methods), use <em>include_once</em>. Either of these will ensure that class files are included only once. They share the same file list, so you don't need to worry about mixing them - a file included with <em>require_once</em> will not be included again by <em>include_once</em>.","code_comparison":[{"code":[{"content":"\n        \nrequire_once 'PHP/CodeSniffer.php';\n        \n        ","title":["Valid: used as statement"]},{"content":"\n        \nrequire_once<em>(</em>'PHP/CodeSniffer.php'<em>)</em>;\n        \n        ","title":["Invalid: used as function"]}]}]},{"key":"PEAR.Files.LineLength","title":"Line Length","standard":"It is recommended to keep lines at approximately 85 characters long for better code readability."},{"key":"PEAR.Formatting.MultiLineAssignment","title":"Multi-Line Assignment","standard":"Multi-line assignment should have the equals sign be the first item on the second line indented correctly.","code_comparison":[{"code":[{"content":"\n        \n$foo\n    <em>=</em> $bar;\n        \n        ","title":["Valid: Assignment operator at the start of the second line."]},{"content":"\n        \n$foo <em>=</em>\n    $bar;\n        \n        ","title":["Invalid: Assignment operator at end of first line."]}]},{"code":[{"content":"\n        \n$foo\n<em>    </em>= $bar;\n        \n        ","title":["Valid: Assignment operator indented one level."]},{"content":"\n        \n$foo\n<em></em>= $bar;\n        \n        ","title":["Invalid: Assignment operator not indented."]}]}]},{"key":"PEAR.Functions.FunctionCallSignature","title":"Function Calls","standard":"  Functions should be called with no spaces between the function name, the opening parenthesis, and the first parameter; and no space between the last parameter, the closing parenthesis, and the semicolon.","code_comparison":[{"code":[{"content":"\n        \n$var = foo($bar, $baz, $quux);\n        \n        ","title":["Valid: spaces between parameters"]},{"content":"\n        \n$var = foo<em> </em>(<em> </em>$bar, $baz, $quux<em> </em>)<em> </em>;\n        \n        ","title":["Invalid: additional spaces used"]}]}]},{"key":"PEAR.Functions.FunctionDeclaration","title":"Function Declarations","standard":"There should be exactly 1 space after the function keyword and 1 space on each side of the use keyword.  Closures should use the Kernighan/Ritchie Brace style and other single-line functions should use the BSD/Allman style.  Multi-line function declarations should have the parameter lists indented one level with the closing parenthesis on a newline followed by a single space and the opening brace of the function.","code_comparison":[{"code":[{"content":"\n        \n$foo = function<em> </em>()<em> </em>use<em> </em>($bar)<em> </em>{\n};\n        \n        ","title":["Valid: Correct spacing around function and use keywords."]},{"content":"\n        \n$foo = function<em></em>()<em></em>use<em></em>($bar)<em></em>{\n};\n        \n        ","title":["Invalid: No spacing around function and use keywords."]}]},{"code":[{"content":"\n        \nfunction foo(\n<em>    </em>$bar,\n<em>    </em>$baz\n<em>) {</em>\n};\n        \n        ","title":["Valid: Multi-line function declaration formatted properly."]},{"content":"\n        \nfunction foo(\n<em></em>$bar,\n<em></em>$baz<em>)</em>\n<em>{</em>\n};\n        \n        ","title":["Invalid: Invalid indentation and formatting of closing parenthesis."]}]}]},{"key":"PEAR.Functions.ValidDefaultValue","title":"Default Values in Function Declarations","standard":"Arguments with default values go at the end of the argument list.","code_comparison":[{"code":[{"content":"\n        \nfunction connect($dsn, <em>$persistent = false</em>)\n{\n    ...\n}\n        \n        ","title":["Valid: argument with default value at end of declaration"]},{"content":"\n        \nfunction connect(<em>$persistent = false</em>, $dsn)\n{\n    ...\n}\n        \n        ","title":["Invalid: argument with default value at start of declaration"]}]}]},{"key":"PEAR.NamingConventions.ValidClassName","title":"Class Names","standard":"Classes should be given descriptive names. Avoid using abbreviations where possible. Class names should always begin with an uppercase letter. The PEAR class hierarchy is also reflected in the class name, each level of the hierarchy separated with a single underscore.","code_comparison":[{"code":[{"content":"\n        \nLog\nNet_Finger\nHTML_Upload_Error\n        \n        ","title":["Examples of valid class names"]},{"content":"\n        \nlog\nNetFinger\nHTML-Upload-Error\n        \n        ","title":["Examples of invalid class names"]}]}]},{"key":"PEAR.NamingConventions.ValidFunctionName","title":"Function and Method Names","standard":"Functions and methods should be named using the \"studly caps\" style (also referred to as \"bumpy case\" or \"camel caps\"). Functions should in addition have the package name as a prefix, to avoid name collisions between packages. The initial letter of the name (after the prefix) is lowercase, and each letter that starts a new \"word\" is capitalized.","code_comparison":[{"code":[{"content":"\n        \nconnect()\ngetData()\nbuildSomeWidget()\nXML_RPC_serializeData()\n        \n        ","title":["Examples of valid function names"]},{"content":"\n        \nConnect()\nget_data()\n        \n        ","title":["Examples of invalid function names"]}]}]},{"key":"PEAR.NamingConventions.ValidVariableName","title":"Variable Names","standard":"Private member variable names should be prefixed with an underscore and public/protected variable names should not.","code_comparison":[{"code":[{"content":"\n        \nclass Foo\n{\n    public $<em>publicVar</em>;\n    protected $<em>protectedVar</em>;\n    private $<em>_privateVar</em>;\n}\n        \n        ","title":["Valid: Proper member variable names."]},{"content":"\n        \nclass Foo\n{\n    public $<em>_publicVar</em>;\n    protected $<em>_protectedVar</em>;\n    private $<em>privateVar</em>;\n}\n        \n        ","title":["Invalid: underscores used on public/protected variables and not used on private variables."]}]}]},{"key":"PEAR.WhiteSpace.ObjectOperatorIndent","title":"Object Operator Indentation","standard":"Chained object operators when spread out over multiple lines should be the first thing on the line and be indented by 1 level.","code_comparison":[{"code":[{"content":"\n        \n$foo\n    <em>-></em>bar()\n    <em>-></em>baz();\n        \n        ","title":["Valid: Object operator at the start of a new line."]},{"content":"\n        \n$foo<em>-></em>\n    bar()<em>-></em>\n    baz();\n        \n        ","title":["Invalid: Object operator at the end of the line."]}]},{"code":[{"content":"\n        \n$foo\n<em>    </em>->bar()\n<em>    </em>->baz();\n        \n        ","title":["Valid: Object operator indented correctly."]},{"content":"\n        \n$foo\n<em></em>->bar()\n<em></em>->baz();\n        \n        ","title":["Invalid: Object operator not indented correctly."]}]}]},{"key":"PEAR.WhiteSpace.ScopeClosingBrace","title":"Closing Brace Indentation","standard":"Closing braces should be indented at the same level as the beginning of the scope.","code_comparison":[{"code":[{"content":"\n        \nif ($test) {\n    $var = 1;\n}\n        \n        ","title":["Valid: Consistent indentation level for scope."]},{"content":"\n        \nif ($test) {\n    $var = 1;\n<em>    </em>}\n        \n        ","title":["Invalid: The ending brace is indented further than the if statement."]}]}]},{"key":"PEAR.WhiteSpace.ScopeIndent","title":"Scope Indentation","standard":"Any scope openers except for switch statements should be indented 1 level.  This includes classes, functions, and control structures.","code_comparison":[{"code":[{"content":"\n        \nfunction foo()\n{\n<em>    </em>if ($test) {\n<em>        </em>$var = 1;\n<em>    </em>}\n}\n        \n        ","title":["Valid: Consistent indentation level for scope."]},{"content":"\n        \nfunction foo()\n{\n<em></em>if ($test) {\n<em></em>$var = 1;\n<em></em>}\n}\n        \n        ","title":["Invalid: Indentation is not used for scope."]}]}]},{"key":"PSR1.Classes.ClassDeclaration","title":"Class Declaration","standard":"Each class must be in a file by itself and must be under a namespace (a top-level vendor name).","code_comparison":[{"code":[{"content":"\n        \n<?php\nnamespace Foo;\n\n<em>class Bar</em> {\n}\n        \n        ","title":["Valid: One class in a file."]},{"content":"\n        \n<?php\nnamespace Foo;\n\n<em>class Bar</em> {\n}\n\n<em>class Baz</em> {\n}\n        \n        ","title":["Invalid: Multiple classes in a single file."]}]},{"code":[{"content":"\n        \n<?php\n<em>namespace Foo;</em>\n\nclass Bar {\n}\n        \n        ","title":["Valid: A vendor-level namespace is used."]},{"content":"\n        \n<?php\nclass Bar {\n}\n        \n        ","title":["Invalid: No namespace used in file."]}]}]},{"key":"PSR1.Files.SideEffects","title":"Side Effects","standard":"A php file should either contain declarations with no side effects, or should just have logic (including side effects) with no declarations.","code_comparison":[{"code":[{"content":"\n        \n<?php\nclass Foo\n{\n}\n        \n        ","title":["Valid: A class defined in a file by itself."]},{"content":"\n        \n<?php\nclass Foo\n{\n}\n\n<em>echo \"Class Foo loaded.\"</em>\n        \n        ","title":["Invalid: A class defined in a file with other code."]}]}]},{"key":"PSR1.Methods.CamelCapsMethodName","title":"Method Name","standard":"Method names MUST be declared in camelCase.","code_comparison":[{"code":[{"content":"\n        \nclass Foo\n{\n    private function <em>doBar</em>()\n    {\n    }\n}\n        \n        ","title":["Valid: method name in camelCase."]},{"content":"\n        \nclass Foo\n{\n    private function <em>do_bar</em>()\n    {\n    }\n}\n        \n        ","title":["Invalid: method name not in camelCase."]}]}]},{"key":"PSR12.Classes.ClassInstantiation","title":"Class Instantiation","standard":"When instantiating a new class, parenthesis MUST always be present even when there are no arguments passed to the constructor.","code_comparison":[{"code":[{"content":"\n        \nnew Foo();\n        \n        ","title":["Valid: Parenthesis used."]},{"content":"\n        \nnew Foo;\n        \n        ","title":["Invalid: Parenthesis not used."]}]}]},{"key":"PSR12.Functions.NullableTypeDeclaration","title":"Nullable Type Declarations Functions","standard":"\n        \n    In nullable type declarations there MUST NOT be a space between the question mark and the type.","code_comparison":[{"code":[{"content":"\n            \npublic function functionName(?string $arg1, ?int $arg2): ?string\n{\n}\n        \n        ","title":["Valid: no whitespace used."]},{"content":"\n        \npublic function functionName(? string $arg1, ? int $arg2): ? string\n{\n}\n        \n        ","title":["Invalid: superfluous whitespace used."]},{"content":"\n            \npublic function functionName(? /* nullable for a reason */ string $arg1): ?\n    // nullable for a reason\n    string\n{\n}\n        \n        ","title":["Invalid: unexpected characters used."]}]}]},{"key":"PSR12.Keywords.ShortFormTypeKeywords","title":"Short Form Type Keywords","standard":"Short form of type keywords MUST be used i.e. bool instead of boolean, int instead of integer etc.","code_comparison":[{"code":[{"content":"\n        \n$foo = (bool) $isValid;\n        \n        ","title":["Valid: Short form type used."]},{"content":"\n        \n$foo = <em>(boolean)</em> $isValid;\n        \n        ","title":["Invalid: Long form type type used."]}]}]},{"key":"PSR12.Namespaces.CompoundNamespaceDepth","title":"Compound Namespace Depth","standard":"Compound namespaces with a depth of more than two MUST NOT be used.","code_comparison":[{"code":[{"content":"\n        \nuse Vendor\\Package\\SomeNamespace\\{\n    SubnamespaceOne\\ClassA,\n    SubnamespaceOne\\ClassB,\n    SubnamespaceTwo\\ClassY,\n    ClassZ,\n};\n        \n        ","title":["Valid: Max depth of 2."]},{"content":"\n        \nuse Vendor\\Package\\SomeNamespace\\{\n    <em>SubnamespaceOne\\AnotherNamespace\\ClassA,</em>\n    SubnamespaceOne\\ClassB,\n    ClassZ,\n};\n        \n        ","title":["Invalid: Max depth of 3."]}]}]},{"key":"PSR12.Operators.OperatorSpacing","title":"Operator Spacing","standard":"All binary and ternary (but not unary) operators MUST be preceded and followed by at least one space. This includes all arithmetic, comparison, assignment, bitwise, logical (excluding ! which is unary), string concatenation, type operators, trait operators (insteadof and as), and the single pipe operator (e.g. ExceptionType1 | ExceptionType2 $e).","code_comparison":[{"code":[{"content":"\n        \nif ($a === $b) {\n    $foo = $bar ?? $a ?? $b;\n} elseif ($a > $b) {\n    $variable = $foo ? 'foo' : 'bar';\n}\n        \n        ","title":["Valid: At least 1 space used."]},{"content":"\n        \nif ($a===$b) {\n    $foo=$bar??$a??$b;\n} elseif ($a>$b) {\n    $variable=$foo?'foo':'bar';\n}\n        \n        ","title":["Invalid: No spacing used."]}]}]},{"key":"PSR2.Classes.ClassDeclaration","title":"Class Declarations","standard":"There should be exactly 1 space between the abstract or final keyword and the class keyword and between the class keyword and the class name.  The extends and implements keywords, if present, must be on the same line as the class name.  When interfaces implemented are spread over multiple lines, there should be exactly 1 interface mentioned per line indented by 1 level.  The closing brace of the class must go on the first line after the body of the class and must be on a line by itself.","code_comparison":[{"code":[{"content":"\n        \nabstract<em> </em>class<em> </em>Foo\n{\n}\n        \n        ","title":["Valid: Correct spacing around class keyword."]},{"content":"\n        \nabstract<em>  </em>class<em>  </em>Foo\n{\n}\n        \n        ","title":["Invalid: 2 spaces used around class keyword."]}]}]},{"key":"PSR2.Classes.PropertyDeclaration","title":"Property Declarations","standard":"Property names should not be prefixed with an underscore to indicate visibility.  Visibility should be used to declare properties rather than the var keyword.  Only one property should be declared within a statement.  The static declaration must come after the visibility declaration.","code_comparison":[{"code":[{"content":"\n        \nclass Foo\n{\n    private $<em>bar</em>;\n}\n        \n        ","title":["Valid: Correct property naming."]},{"content":"\n        \nclass Foo\n{\n    private $<em>_bar</em>;\n}\n        \n        ","title":["Invalid: An underscore prefix used to indicate visibility."]}]},{"code":[{"content":"\n        \nclass Foo\n{\n    <em>private</em> $bar;\n}\n        \n        ","title":["Valid: Visibility of property declared."]},{"content":"\n        \nclass Foo\n{\n    <em>var</em> $bar;\n}\n        \n        ","title":["Invalid: Var keyword used to declare property."]}]},{"code":[{"content":"\n        \nclass Foo\n{\n    private $bar;\n    private $baz;\n}\n        \n        ","title":["Valid: One property declared per statement."]},{"content":"\n        \nclass Foo\n{\n    private <em>$bar, $baz</em>;\n}\n        \n        ","title":["Invalid: Multiple properties declared in one statement."]}]},{"code":[{"content":"\n        \nclass Foo\n{\n    public <em>static</em> $bar;\n    private $baz;\n}\n        \n        ","title":["Valid: If declared as static, the static declaration must come after the visibility declaration."]},{"content":"\n        \nclass Foo\n{\n    <em>static<em> protected $bar;\n}\n        \n        ","title":["Invalid: Static declaration before the visibility declaration."]}]}]},{"key":"PSR2.ControlStructures.ControlStructureSpacing","title":"Control Structure Spacing","standard":"Control Structures should have 0 spaces after opening parentheses and 0 spaces before closing parentheses.","code_comparison":[{"code":[{"content":"\n        \nif (<em></em>$foo<em></em>) {\n    $var = 1;\n}\n        \n        ","title":["Valid: Correct spacing."]},{"content":"\n        \nif (<em> </em>$foo<em> </em>) {\n    $var = 1;\n}\n        \n        ","title":["Invalid: Whitespace used inside the parentheses."]}]}]},{"key":"PSR2.ControlStructures.ElseIfDeclaration","title":"Elseif Declarations","standard":"PHP's elseif keyword should be used instead of else if.","code_comparison":[{"code":[{"content":"\n        \nif ($foo) {\n    $var = 1;\n} <em>elseif</em> ($bar) {\n    $var = 2;\n}\n        \n        ","title":["Valid: Single word elseif keyword used."]},{"content":"\n        \nif ($foo) {\n    $var = 1;\n} <em>else if</em> ($bar) {\n    $var = 2;\n}\n        \n        ","title":["Invalid: Separate else and if keywords used."]}]}]},{"key":"PSR2.ControlStructures.SwitchDeclaration","title":"Switch Declarations","standard":"Case statements should be indented 4 spaces from the switch keyword.  It should also be followed by a space.  Colons in switch declarations should not be preceded by whitespace.  Break statements should be indented 4 more spaces from the case statement.  There must be a comment when falling through from one case into the next.","code_comparison":[{"code":[{"content":"\n        \nswitch ($foo) {\n<em>    </em>case 'bar':\n        break;\n}\n        \n        ","title":["Valid: Case statement indented correctly."]},{"content":"\n        \nswitch ($foo) {\n<em></em>case 'bar':\n    break;\n}\n        \n        ","title":["Invalid: Case statement not indented 4 spaces."]}]},{"code":[{"content":"\n        \nswitch ($foo) {\n    case<em> </em>'bar':\n        break;\n}\n        \n        ","title":["Valid: Case statement followed by 1 space."]},{"content":"\n        \nswitch ($foo) {\n    case<em></em>'bar':\n        break;\n}\n        \n        ","title":["Invalid: Case statement not followed by 1 space."]}]},{"code":[{"content":"\n        \nswitch ($foo) {\n    case 'bar'<em></em>:\n        break;\n    default<em></em>:\n        break;\n}\n        \n        ","title":["Valid: Colons not prefixed by whitespace."]},{"content":"\n        \nswitch ($foo) {\n    case 'bar'<em> </em>:\n        break;\n    default<em> </em>:\n        break;\n}\n        \n        ","title":["Invalid: Colons prefixed by whitespace."]}]},{"code":[{"content":"\n        \nswitch ($foo) {\n    case 'bar':\n<em>        </em>break;\n}\n        \n        ","title":["Valid: Break statement indented correctly."]},{"content":"\n        \nswitch ($foo) {\n    case 'bar':\n<em>    </em>break;\n}\n        \n        ","title":["Invalid: Break statement not indented 4 spaces."]}]},{"code":[{"content":"\n        \nswitch ($foo) {\n    case 'bar':\n    <em>// no break</em>\n    default<em></em>:\n        break;\n}\n        \n        ","title":["Valid: Comment marking intentional fall-through."]},{"content":"\n        \nswitch ($foo) {\n    case 'bar':\n    default<em></em>:\n        break;\n}\n        \n        ","title":["Invalid: No comment marking intentional fall-through."]}]}]},{"key":"PSR2.Files.EndFileNewline","title":"End File Newline","standard":"PHP Files should end with exactly one newline."},{"key":"PSR2.Methods.MethodDeclaration","title":"Method Declarations","standard":"Method names should not be prefixed with an underscore to indicate visibility.  The static keyword, when present, should come after the visibility declaration, and the final and abstract keywords should come before.","code_comparison":[{"code":[{"content":"\n        \nclass Foo\n{\n    private function <em>bar</em>()\n    {\n    }\n}\n        \n        ","title":["Valid: Correct method naming."]},{"content":"\n        \nclass Foo\n{\n    private function <em>_bar</em>()\n    {\n    }\n}\n        \n        ","title":["Invalid: An underscore prefix used to indicate visibility."]}]},{"code":[{"content":"\n        \nclass Foo\n{\n    <em>final public static</em> function <em>bar</em>()\n    {\n    }\n}\n        \n        ","title":["Valid: Correct ordering of method prefixes."]},{"content":"\n        \nclass Foo\n{\n    <em>static public final</em> function <em>bar</em>()\n    {\n    }\n}\n        \n        ","title":["Invalid: static keyword used before visibility and final used after."]}]}]},{"key":"PSR2.Namespaces.NamespaceDeclaration","title":"Namespace Declarations","standard":"There must be one blank line after the namespace declaration.","code_comparison":[{"code":[{"content":"\n        \nnamespace \\Foo\\Bar;\n<em></em>\nuse \\Baz;\n        \n        ","title":["Valid: One blank line after the namespace declaration."]},{"content":"\n        \nnamespace \\Foo\\Bar;\nuse \\Baz;\n        \n        ","title":["Invalid: No blank line after the namespace declaration."]}]}]},{"key":"PSR2.Namespaces.UseDeclaration","title":"Namespace Declarations","standard":"Each use declaration must contain only one namespace and must come after the first namespace declaration.  There should be one blank line after the final use statement.","code_comparison":[{"code":[{"content":"\n        \nuse \\Foo;\nuse \\Bar;\n        \n        ","title":["Valid: One use declaration per namespace."]},{"content":"\n        \nuse <em>\\Foo, \\Bar</em>;\n        \n        ","title":["Invalid: Multiple namespaces in a use declaration."]}]},{"code":[{"content":"\n        \nnamespace \\Foo;\n\nuse \\Bar;\n        \n        ","title":["Valid: Use statements come after first namespace."]},{"content":"\n        \nuse \\Bar;\n\nnamespace \\Foo;\n        \n        ","title":["Invalid: Namespace declared after use."]}]},{"code":[{"content":"\n        \nuse \\Foo;\nuse \\Bar;\n<em></em>\nclass Baz\n{\n}\n        \n        ","title":["Valid: A single blank line after the final use statement."]},{"content":"\n        \nuse \\Foo;\nuse \\Bar;\nclass Baz\n{\n}\n        \n        ","title":["Invalid: No blank line after the final use statement."]}]}]},{"key":"Squiz.Arrays.ArrayBracketSpacing","title":"Array Bracket Spacing","standard":"When referencing arrays you should not put whitespace around the opening bracket or before the closing bracket.","code_comparison":[{"code":[{"content":"\n        \n$foo<em></em>[<em></em>'bar'<em></em>];\n\n        ","title":["Valid: No spaces around the brackets."]},{"content":"\n        \n$foo<em> </em>[<em> </em>'bar'<em> </em>];\n\n        ","title":["Invalid: Spaces around the brackets."]}]}]},{"key":"Squiz.Arrays.ArrayDeclaration","title":"Array Declarations","standard":"This standard covers all array declarations, regardless of the number and type of values contained within the array.","code_comparison":[{"code":[{"content":"\n        \n$array = <em>a</em>rray('val1', 'val2');\n        \n        ","title":["Valid: array keyword lowercase"]},{"content":"\n        \n$array = <em>A</em>rray('val1', 'val2');\n        \n        ","title":["Invalid: first letter capitalised"]}]},{"code":[{"content":"\n        \n$array = array(\n          <em>'key1'</em> => 'value1',\n          'key2' => 'value2',\n         );\n        \n        ","title":["Valid: first key on second line"]},{"content":"\n        \n$array = array(<em>'key1'</em> => 'value1',\n          'key2' => 'value2',\n         );\n        \n        ","title":["Invalid: first key on same line"]}]},{"code":[{"content":"\n        \n$array = array(\n         <em> </em>'key1' => 'value1',\n         <em> </em>'key2' => 'value2',\n         );\n        \n        ","title":["Valid: aligned correctly"]},{"content":"\n        \n$array = array(\n         <em>'</em>key1' => 'value1',\n         <em>'</em>key2' => 'value2',\n);\n        \n        ","title":["Invalid: keys and parenthesis aligned incorrectly"]}]},{"code":[{"content":"\n        \n$array = array(\n          'keyTen'<em>    </em>=> 'ValueTen',\n          'keyTwenty'<em> </em>=> 'ValueTwenty',\n         );\n        \n        ","title":["Valid: keys and values aligned"]},{"content":"\n        \n$array = array(\n          'keyTen'<em> </em>=> 'ValueTen',\n          'keyTwenty'<em> </em>=> 'ValueTwenty',\n         );\n        \n        ","title":["Invalid: alignment incorrect"]}]},{"code":[{"content":"\n        \n$array = array(\n          'key1' => 'value1',\n          'key2' => 'value2',\n          'key3' => 'value3'<em>,</em>\n         );\n        \n        ","title":["Valid: comma after each value"]},{"content":"\n        \n$array = array(\n          'key1' => 'value1',\n          'key2' => 'value2',\n          'key3' => 'value3'<em> </em>\n         );\n        \n        ","title":["Invalid: no comma after last value"]}]}]},{"key":"Squiz.Classes.LowercaseClassKeywords","title":"Lowercase Class Keywords","standard":"The php keywords class, interface, trait, extends, implements, abstract, final, var, and const should be lowercase.","code_comparison":[{"code":[{"content":"\n        \n<em>final</em> <em>class</em> Foo <em>extends</em> Bar\n{\n}\n\n        ","title":["Valid: Lowercase class keywords."]},{"content":"\n        \n<em>Final</em> <em>Class</em> Foo <em>Extends</em> Bar\n{\n}\n\n        ","title":["Invalid: Initial capitalization of class keywords."]}]}]},{"key":"Squiz.Classes.SelfMemberReference","title":"Self Member Reference","standard":"The self keyword should be used instead of the current class name, should be lowercase, and should not have spaces before or after it.","code_comparison":[{"code":[{"content":"\n        \n<em>self</em>::foo();\n\n        ","title":["Valid: Lowercase self used."]},{"content":"\n        \n<em>SELF</em>::foo();\n\n        ","title":["Invalid: Uppercase self used."]}]},{"code":[{"content":"\n        \nself<em></em>::<em></em>foo();\n\n        ","title":["Valid: Correct spacing used."]},{"content":"\n        \nself<em> </em>::<em> </em>foo();\n\n        ","title":["Invalid: Incorrect spacing used."]}]},{"code":[{"content":"\n        \nclass Foo\n{\n    public static function bar()\n    {\n    }\n\n    public static function baz()\n    {\n        <em>self</em>::bar();\n    }\n}\n\n        ","title":["Valid: Self used as reference."]},{"content":"\n        \nclass <em>Foo</em>\n{\n    public static function bar()\n    {\n    }\n\n    public static function baz()\n    {\n        <em>Foo</em>::bar();\n    }\n}\n\n        ","title":["Invalid: Local class name used as reference."]}]}]},{"key":"Squiz.Commenting.DocCommentAlignment","title":"Doc Comment Alignment","standard":"The asterisks in a doc comment should align, and there should be one space between the asterisk and tags.","code_comparison":[{"code":[{"content":"\n        \n/**\n<em> </em>* @see foo()\n<em> </em>*/\n\n        ","title":["Valid: Asterisks are aligned."]},{"content":"\n        \n/**\n<em>  </em>* @see foo()\n<em></em>*/\n\n        ","title":["Invalid: Asterisks are not aligned."]}]},{"code":[{"content":"\n        \n/**\n *<em> </em>@see foo()\n */\n\n        ","title":["Valid: One space between asterisk and tag."]},{"content":"\n        \n/**\n *<em>  </em>@see foo()\n */\n\n        ","title":["Invalid: Incorrect spacing used."]}]}]},{"key":"Squiz.Commenting.FunctionCommentThrowTag","title":"Doc Comment Throws Tag","standard":"If a function throws any exceptions, they should be documented in a @throws tag.","code_comparison":[{"code":[{"content":"\n        \n/**\n * <em>@throws Exception all the time</em>\n * @return void\n */\nfunction foo()\n{\n    throw new Exception('Danger!');\n}\n\n        ","title":["Valid: @throws tag used."]},{"content":"\n        \n/**\n * @return void\n */\nfunction foo()\n{\n    throw new Exception('Danger!');\n}\n\n        ","title":["Invalid: No @throws tag used for throwing function."]}]}]},{"key":"Squiz.ControlStructures.ForEachLoopDeclaration","title":"Foreach Loop Declarations","standard":"There should be a space between each element of a foreach loop and the as keyword should be lowercase.","code_comparison":[{"code":[{"content":"\n        \nforeach (<em></em>$foo<em> </em>as<em> </em>$bar<em> </em>=><em> </em>$baz<em></em>) {\n    echo $baz;\n}\n\n        ","title":["Valid: Correct spacing used."]},{"content":"\n        \nforeach (<em> </em>$foo<em>  </em>as<em>  </em>$bar<em></em>=><em></em>$baz<em> </em>) {\n    echo $baz;\n}\n\n        ","title":["Invalid: Invalid spacing used."]}]},{"code":[{"content":"\n        \nforeach ($foo <em>as</em> $bar => $baz) {\n    echo $baz;\n}\n\n        ","title":["Valid: Lowercase as keyword."]},{"content":"\n        \nforeach ($foo <em>AS</em> $bar => $baz) {\n    echo $baz;\n}\n\n        ","title":["Invalid: Uppercase as keyword."]}]}]},{"key":"Squiz.ControlStructures.ForLoopDeclaration","title":"For Loop Declarations","standard":"In a for loop declaration, there should be no space inside the brackets and there should be 0 spaces before and 1 space after semicolons.","code_comparison":[{"code":[{"content":"\n        \nfor (<em></em>$i = 0; $i < 10; $i++<em></em>) {\n    echo $i;\n}\n\n        ","title":["Valid: Correct spacing used."]},{"content":"\n        \nfor (<em> </em>$i = 0; $i < 10; $i++<em> </em>) {\n    echo $i;\n}\n\n        ","title":["Invalid: Invalid spacing used inside brackets."]}]},{"code":[{"content":"\n        \nfor ($i = 0<em></em>; $i < 10<em></em>; $i++) {\n    echo $i;\n}\n\n        ","title":["Valid: Correct spacing used."]},{"content":"\n        \nfor ($i = 0<em> </em>; $i < 10<em> </em>; $i++) {\n    echo $i;\n}\n\n        ","title":["Invalid: Invalid spacing used before semicolons."]}]},{"code":[{"content":"\n        \nfor ($i = 0;<em> </em>$i < 10;<em> </em>$i++) {\n    echo $i;\n}\n\n        ","title":["Valid: Correct spacing used."]},{"content":"\n        \nfor ($i = 0;<em></em>$i < 10;<em></em>$i++) {\n    echo $i;\n}\n\n        ","title":["Invalid: Invalid spacing used after semicolons."]}]}]},{"key":"Squiz.ControlStructures.LowercaseDeclaration","title":"Lowercase Control Structure Keywords","standard":"The php keywords if, else, elseif, foreach, for, do, switch, while, try, and catch should be lowercase.","code_comparison":[{"code":[{"content":"\n        \n<em>if</em> ($foo) {\n    $bar = true;\n}\n\n        ","title":["Valid: Lowercase if keyword."]},{"content":"\n        \n<em>IF</em> ($foo) {\n    $bar = true;\n}\n\n        ","title":["Invalid: Uppercase if keyword."]}]}]},{"key":"Squiz.Functions.FunctionDuplicateArgument","title":"Lowercase Built-In functions","standard":"All PHP built-in functions should be lowercased when called.","code_comparison":[{"code":[{"content":"\n        \nif (<em>isset</em>($foo)) {\n    echo $foo;\n}\n\n        ","title":["Valid: Lowercase function call."]},{"content":"\n        \nif (<em>isSet</em>($foo)) {\n    echo $foo;\n}\n\n        ","title":["Invalid: isset not called as lowercase."]}]}]},{"key":"Squiz.Functions.LowercaseFunctionKeywords","title":"Lowercase Function Keywords","standard":"The php keywords function, public, private, protected, and static should be lowercase.","code_comparison":[{"code":[{"content":"\n        \n<em>function</em> foo()\n{\n    return true;\n}\n\n        ","title":["Valid: Lowercase function keyword."]},{"content":"\n        \n<em>FUNCTION</em> foo()\n{\n    return true;\n}\n\n        ","title":["Invalid: Uppercase function keyword."]}]}]},{"key":"Squiz.Scope.StaticThisUsage","title":"Static This Usage","standard":"Static methods should not use $this.","code_comparison":[{"code":[{"content":"\n        \nclass Foo\n{\n    <em>static</em> function bar()\n    {\n        return <em>self</em>::$staticMember;\n    }\n}\n\n        ","title":["Valid: Using self:: to access static variables."]},{"content":"\n        \nclass Foo\n{\n    <em>static</em> function bar()\n    {\n    return <em>$this</em>->$staticMember;\n    }\n}\n\n        ","title":["Invalid: Using $this-> to access static variables."]}]}]},{"key":"Squiz.Strings.EchoedStrings","title":"Echoed Strings","standard":"Simple strings should not be enclosed in parentheses when being echoed.","code_comparison":[{"code":[{"content":"\n        \necho<em> </em>\"Hello\";\n\n        ","title":["Valid: Using echo without parentheses."]},{"content":"\n        \necho<em>(</em>\"Hello\"<em>)</em>;\n\n        ","title":["Invalid: Using echo with parentheses."]}]}]},{"key":"Squiz.WhiteSpace.CastSpacing","title":"Cast Whitespace","standard":"Casts should not have whitespace inside the parentheses.","code_comparison":[{"code":[{"content":"\n        \n$foo = (<em></em>int<em></em>)'42';\n\n        ","title":["Valid: No spaces."]},{"content":"\n        \n$foo = (<em> </em>int<em> </em>)'42';\n\n        ","title":["Invalid: Whitespace used inside parentheses."]}]}]},{"key":"Squiz.WhiteSpace.FunctionOpeningBrace","title":"Function Opening Brace Whitespace","standard":"The opening brace for functions should be on a new line with no blank lines surrounding it.","code_comparison":[{"code":[{"content":"\n        \nfunction foo()\n<em>{</em>\n}\n\n        ","title":["Valid: Opening brace is on a new line."]},{"content":"\n        \nfunction foo() <em>{</em>\n}\n\n        ","title":["Invalid: Opening brace is on the same line as the function declaration."]}]},{"code":[{"content":"\n        \nfunction foo()\n{\n<em>    return 42;</em>\n}\n\n        ","title":["Valid: No blank lines after the opening brace."]},{"content":"\n        \nfunction foo()\n{\n<em></em>\n    return 42;\n}\n\n        ","title":["Invalid: A blank line after the opening brace."]}]}]},{"key":"Squiz.WhiteSpace.LanguageConstructSpacing","title":"Language Construct Whitespace","standard":"The php constructs echo, print, return, include, include_once, require, require_once, and new should have one space after them.","code_comparison":[{"code":[{"content":"\n        \necho<em> </em>\"hi\";\n\n        ","title":["Valid: echo statement with a single space after it."]},{"content":"\n        \necho<em></em>\"hi\";\n\n        ","title":["Invalid: echo statement with no space after it."]}]}]},{"key":"Squiz.WhiteSpace.ObjectOperatorSpacing","title":"Object Operator Spacing","standard":"The object operator (->) should not have any space around it.","code_comparison":[{"code":[{"content":"\n        \n$foo<em></em>-><em></em>bar();\n\n        ","title":["Valid: No spaces around the object operator."]},{"content":"\n        \n$foo<em> </em>-><em> </em>bar();\n\n        ","title":["Invalid: Whitespace surrounding the object operator."]}]}]},{"key":"Squiz.WhiteSpace.ScopeKeywordSpacing","title":"Scope Keyword Spacing","standard":"The php keywords static, public, private, and protected should have one space after them.","code_comparison":[{"code":[{"content":"\n        \npublic<em> </em>static<em> </em>function foo()\n{\n}\n\n        ","title":["Valid: A single space following the keywords."]},{"content":"\n        \npublic<em>  </em>static<em>  </em>function foo()\n{\n}\n\n        ","title":["Invalid: Multiple spaces following the keywords."]}]}]},{"key":"Squiz.WhiteSpace.SemicolonSpacing","title":"Semicolon Spacing","standard":"Semicolons should not have spaces before them.","code_comparison":[{"code":[{"content":"\n        \necho \"hi\"<em></em>;\n\n        ","title":["Valid: No space before the semicolon."]},{"content":"\n        \necho \"hi\"<em> </em>;\n\n        ","title":["Invalid: Space before the semicolon."]}]}]},{"key":"Zend.Debug.CodeAnalyzer","title":"Zend Code Analyzer","standard":"PHP Code should pass the zend code analyzer.","code_comparison":[{"code":[{"content":"\n        \nfunction foo($bar, $baz)\n{\n    return <em>$bar + $baz</em>;\n}\n        \n        ","title":["Valid: Valid PHP Code."]},{"content":"\n        \nfunction foo($bar, $baz)\n{\n    return <em>$bar + 2</em>;\n}\n        \n        ","title":["Invalid: There is an unused function parameter."]}]}]},{"key":"Zend.Files.ClosingTag","title":"Closing PHP Tags","standard":"Files should not have closing php tags.","code_comparison":[{"code":[{"content":"\n        \n<?php\n$var = 1;\n        \n        ","title":["Valid: No closing tag at the end of the file."]},{"content":"\n        \n<?php\n$var = 1;\n<em>?></em>\n        \n        ","title":["Invalid: A closing php tag is included at the end of the file."]}]}]},{"key":"Zend.NamingConventions.ValidVariableName","title":"Variable Names","standard":"Variable names should be camelCased with the first letter lowercase.  Private and protected member variables should begin with an underscore","code_comparison":[{"code":[{"content":"\n        \n<em>$testNumber</em> = 1;\n        \n        ","title":["Valid: A multi-word variable uses camel casing."]},{"content":"\n        \n<em>$Test_Number</em> = 1;\n        \n        ","title":["Invalid: A multi-word variable uses underscores and initial capitalization."]}]},{"code":[{"content":"\n        \nclass Foo\n{\n    private $<em>_</em>bar;\n}\n        \n        ","title":["Valid: A private member variable begins with an underscore."]},{"content":"\n        \nclass Foo\n{\n    private $bar;\n}\n        \n        ","title":["Invalid: A private member variable does not begin with an underscore."]}]}]}]